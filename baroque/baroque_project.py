import os
import sys


class BaroqueProject(object):
    """ Stores details about the current project.

    It takes a source_directory and a destination_directory.
    source_directory: Either a shipment, collection, or item directory
    destination_directory: Location to store reports generated by baroque

    An initial instantiation of this object might look like:

    {
        "items": [
            {
            "id": "",
            "path": "",
            "files": {
                "wav": [],
                "mp3": [],
                "jpg": [],
                "xml": [],
                "md5": [],
                "txt": []
            },
            "errors": []
            }
        ],
        "source": source_directory,
        "destination": destination_directory
    }
    """

    def __init__(self, source_directory, destination_directory):
        if not os.path.exists(source_directory):
            print("source_directory does not exist")
            sys.exit()
        if not os.path.exists(destination_directory):
            print("destination_directory does not exist")
            sys.exit()

        self.source = source_directory
        self.destination = destination_directory

        self.shipment = []
        self.collections = []
        self.items = []

        self.source_type = self.characterize_source_directory(source_directory)
        if self.source_type == "shipment":
            self.process_shipment(source_directory)
        elif self.source_type == "collection":
            self.process_collection(source_directory)
        elif self.source_type == "item":
            self.process_item(source_directory)

    def characterize_source_directory(self, character_directory):
        """ Determine if source_directory is a shipment, collection, or item """
        character_directory_name = os.path.basename(character_directory)
        character_directory_dirs = []
        character_directory_files = []

        for file in os.listdir(character_directory):
            if os.path.isfile(os.path.join(character_directory, file)):
                character_directory_files.append(file)
            else:
                character_directory_dirs.append(file)

        if len(character_directory_files) > 0:
            return "item"
        elif len(character_directory_dirs) > 0:
            if character_directory_dirs[0].startswith(character_directory_name) is True:
                return "collection"
            else:
                return "shipment"
        else:
            print("source_directory is empty")
            sys.exit()

    def process_shipment(self, shipment_directory):
        """ Process all collections in a shipment """
        self.shipment.append({
            "id": os.path.basename(shipment_directory),
            "path": shipment_directory
        })

        for collection in os.listdir(shipment_directory):
            self.process_collection(os.path.join(shipment_directory, collection))

    def process_collection(self, collection_directory):
        """ Process all items in a collection """
        self.collections.append({
            "id": os.path.basename(collection_directory),
            "path": collection_directory
        })

        for item in os.listdir(collection_directory):
            self.process_item(os.path.join(collection_directory, item))

    def process_item(self, item_directory):
        """ Process all files in an item """
        files = {"wav": [], "mp3": [], "jpg": [], "xml": [], "md5": [], "txt": []}

        for file in os.listdir(item_directory):
            for type in list(files.keys()):
                if file.lower().endswith(type):
                    files[type].append(file)

        self.items.append({
            "id": os.path.basename(item_directory),
            "path": item_directory,
            "files": files
        })
